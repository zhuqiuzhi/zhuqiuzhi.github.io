# nc -- arbitrary TCP and UDP connections and listens

### CLIENT/SERVER MODEL
     It is quite simple to build a very basic client/server model using nc.  On one console, start nc listening on
     a specific port for a connection.  For example:

           $ nc -l 1234

     nc is now listening on port 1234 for a connection.  On a second console (or a second machine), connect to the
     machine and port being listened on:

           $ nc 127.0.0.1 1234

     There should now be a connection between the ports.  Anything typed at the second console will be concatenated
     to the first, and vice-versa.  After the connection has been set up, nc does not really care which side is
     being used as a `server' and which side is being used as a `client'.  The connection may be terminated using
     an EOF (`^D').

### DATA TRANSFER
     The example in the previous section can be expanded to build a basic data transfer model.  Any information
     input into one end of the connection will be output to the other end, and input and output can be easily cap-
     tured in order to emulate file transfer.

     Start by using nc to listen on a specific port, with output captured into a file:

           $ nc -l 1234 > filename.out

     Using a second machine, connect to the listening nc process, feeding it the file which is to be transferred:

           $ nc host.example.com 1234 < filename.in

     After the file has been transferred, the connection will close automatically.

### TALKING TO SERVERS
     It is sometimes useful to talk to servers ``by hand'' rather than through a user interface.  It can aid in
     troubleshooting, when it might be necessary to verify what data a server is sending in response to commands
     issued by the client.  For example, to retrieve the home page of a web site:

           $ echo -n "GET / HTTP/1.0\r\n\r\n" | nc host.example.com 80
 Note that this also displays the headers sent by the web server.  They can be filtered, using a tool such as
     sed(1), if necessary.

     More complicated examples can be built up when the user knows the format of requests required by the server.
     As another example, an email may be submitted to an SMTP server using:

           $ nc localhost 25 << EOF
           HELO host.example.com
           MAIL FROM: <user@host.example.com>
           RCPT TO: <user2@host.example.com>
           DATA
           Body of email.
           .
           QUIT
           EOF

### PORT SCANNING
     It may be useful to know which ports are open and running services on a target machine.  The -z flag can be
     used to tell nc to report open ports, rather than initiate a connection.  For example:

           $ nc -z host.example.com 20-30
           Connection to host.example.com 22 port [tcp/ssh] succeeded!
           Connection to host.example.com 25 port [tcp/smtp] succeeded!

     The port range was specified to limit the search to ports 20 - 30.

     Alternatively, it might be useful to know which server software is running, and which versions.  This informa-
     tion is often contained within the greeting banners.  In order to retrieve these, it is necessary to first
     make a connection, and then break the connection when the banner has been retrieved.  This can be accomplished
     by specifying a small timeout with the -w flag, or perhaps by issuing a "QUIT" command to the server:

           $ echo "QUIT" | nc host.example.com 20-30
           SSH-1.99-OpenSSH_3.6.1p2
           Protocol mismatch.
           220 host.example.com IMS SMTP Receiver Version 0.84 Ready

### EXAMPLES
     Open a TCP connection to port 42 of host.example.com, using port 31337 as the source port, with a timeout of 5
     seconds:

           $ nc -p 31337 -w 5 host.example.com 42

     Open a UDP connection to port 53 of host.example.com:

           $ nc -u host.example.com 53

     Open a TCP connection to port 42 of host.example.com using 10.1.2.3 as the IP for the local end of the connec-
     tion:

           $ nc -s 10.1.2.3 host.example.com 42

     Create and listen on a Unix Domain Socket:

           $ nc -lU /var/tmp/dsocket

     Connect to port 42 of host.example.com via an HTTP proxy at 10.2.3.4, port 8080.  This example could also be
     used by ssh(1); see the ProxyCommand directive in ssh_config(5) for more information.

           $ nc -x10.2.3.4:8080 -Xconnect host.example.com 42
